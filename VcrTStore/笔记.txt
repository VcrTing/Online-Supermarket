为什么前后端分离:
    1、pc app pad多端适应
    2、SPA开发模式的流行（单页面）
    3、前后端开发职责不清
    4、开发效率的问题，前后端互相等待
    5、前端一直配合后端，能力受限
    6、后台开发语言模板高度耦合，导致开发语言严重依赖

前后端分离的缺点:
    1、前后端学习门槛增加
    2、数据依赖导致文档的重要性增加
    3、前端工作量加大
    4、SEO的难度加大（搜索引擎难度增加）
    5、后端开发模式迁移增加成本

restful api:
    前后端分离的最佳实践
    1、轻量，直接通过http，不需要额外协议
    2、面向资源，一目了然，具有自解释性
    3、数据描述简单，使用json

前端工程化:

数据双向绑定:

组件化开发:

webpack:
    将东西变为js文件

vue, vuex, vue-router, axios:

es6, babel

rest framework:
    依赖:
        Markdown
        django-filter
        django-crispy-forms
        django-guardian: 支持对象级别的权限
        coreapi: 支持drf的文档
        djangorestframework-jwt: jwt用户认证

    搜索search_field小知识:
        ^以什么开头，=精确搜索该字段，@全段检索，$正则表达式

    drf token的两大问题:
        保存到一台服务器的，如果是分布式系统，就比较麻烦
        没有过期时间，他会一直有效

    未设定验证的View将以匿名用户身份访问

    传统的验证方式:
        session存储id
        弊端:
            会占用服务器的资源
            大型应用需要使用kv数据库，一系列缓存机制来存储数据

    JWT:
        签名 + 负载的用户信息数据，组合成唯一的，若base64编码的负载数据更改，再与签名结合，就会与之前组合的值不一样，这样就无法再访问服务器了。
        这样就不需要 token数据库表了,

        好处，若是邮箱交易，JWT可以不需要用户再登录，传jwt值进行对比，还用户就可以执行服务器指定的工作
            保存再客户端的
            可以用来设计用户的认证和授权系统
            甚至Web应用的单点登录，一次登录，子域名的应用用户都能访问

        弊端:
            占用一些计算资源

短信服务:
    云片网，需要短信签名
    制作短信模板
    填写ip白名单

利用django信号量(signals):
    接收信号，然后作相应的事情